(defun empty void ())

(defun only-args void ((a i32) (b i32)))

(defun add-it i32 ((a i32) (b i32))
  (+ a b))

(defun add-sequential i32 ((a i32) (b i32))
  (+ a b)
  (+ a b))

(defun add-recursive i32 ((a i32) (b i32))
  (+ (+ a b) b))

(defun add-mul i32 ((a i32) (b i32))
  (+ (* a b) b))

(defun and-it i32 ((a i32) (b i32))
  (and a b))

(defun and-add i32 ((a i32) (b i32))
  (and (+ a b) b)
  (* a b))

(defun if-it i32 ((a i32) (b i32) (c i32))
  (if (< a b) (+ b c) c))

;; check simple immediate
(defun add-two i32 ((a i32))
  (+ a 2))

;; check array argument specification and array access
;; (two dimensional)
(defun arr-2x ptr ((an-arr (arr i32 (2 2)))
                      (row i32)
                      (col i32))
  (aloc an-arr row col))

;; check array argument specification and array access
;; (one dimensional)
(defun arr-1x ptr ((an-arr (arr i32 (2)))
                      (col i32))
  (aloc an-arr col))

;; check fn argument value in array dimensions
(defun arr-ptr-index ptr ((n i32) (an-arr (arr i32 (n 2)))
                          (row i32)
                          (col i32))
  (aloc an-arr row col))

;; check fn argument value in array dimensions
(defun arr-val-index i32 ((n i32) (an-arr (arr i32 (n 2)))
                          (row i32)
                          (col i32))
  (aref an-arr row col))

;; check fn argument value in array dimensions
(defun arr-set i32 ((n i32) (an-arr (arr i32 (n 2)))
                          (row i32)
                          (col i32))
  (aset (+ n n) an-arr row col))

;; lexically scoped variables
(defun let-it-be i32 ((a i32))
  (let* ((i 3)
         (j (+ 1 (let* ((i i)
                        (j (+ i a)))
                   j))))
    j))

;; do* loop
(defun do*-factorial i32 ((times i32))
  (do* ((nth 0 (+ n1 n2))
        (n1  0 n2)
        (n2  1 nth)
        (count 0 (+ count 1)))
       ((< times count)
        nth)))
